name: Build and Deploy Docker Images

on:
   push:
      branches:
         - master

jobs:
   build:
      runs-on: ubuntu-latest

      env:
         DOCKER_USERNAME: marine1232
         APP_NAME: ds2-frontend # Ensure this is lowercase, and must match docker compose image property

      steps:
         - name: Checkout code
           uses: actions/checkout@v2
           with:
              token: ${{ secrets.PAT_TOKEN }}

         - name: Set up Node.js
           uses: actions/setup-node@v3
           with:
              node-version: '18'
              cache: 'npm'

         - name: Install dependencies
           run: npm ci

         - name: Run unit tests
           run: npm test -- --watch=false
           env:
              CI: true

         - name: Get current version
           id: get_version
           run: |
              current_version=$(node -p "require('./package.json').version")
              echo "Current version: $current_version"
              echo "current_version=$current_version" >> "$GITHUB_OUTPUT"

         - name: Check for existing tag
           id: check_tag
           run: |
              current_version="${{ steps.get_version.outputs.current_version }}"
              TAG_EXISTS=$(git tag --list "v$current_version" | wc -l)
              echo "Checking tag for version: v$current_version"
              if [ "$TAG_EXISTS" -ne 0 ]; then
                echo "Tag v$current_version already exists. Please bump the version in package.json."
                exit 1
              fi
              echo "Tag does not exist. Proceeding with build."
              echo "tag_exists=$TAG_EXISTS" >> "$GITHUB_OUTPUT"

         - name: Display versions for debugging
           run: |
              echo "Current version: ${{ steps.get_version.outputs.current_version }}"
              echo "Tag exists: ${{ steps.check_tag.outputs.tag_exists }}"

         - name: Configure Git user
           run: |
              git config --global user.name 'github-actions[bot]'
              git config --global user.email 'github-actions[bot]@users.noreply.github.com'

         - name: Create and push tag
           run: |
              new_version="${{ steps.get_version.outputs.current_version }}"
              echo "Creating and pushing tag: v$new_version"
              git tag -a "v$new_version" -m "Release version $new_version"
              git push origin "v$new_version"
           env:
              GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

         - name: Set up Docker Buildx
           uses: docker/setup-buildx-action@v1

         - name: Login to Docker Hub
           uses: docker/login-action@v2
           with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}

         - name: Set environment variables for frontend
           run: |
              echo "REACT_APP_ENV=${{ secrets.REACT_APP_ENV }}" >> .env
              echo "REACT_APP_API_PROD_ENDPOINT=${{ secrets.REACT_APP_API_PROD_ENDPOINT }}" >> .env

         - name: Build and push Docker images for frontend
           run: |
              docker build -t ${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest .
              docker tag ${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest ${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ steps.get_version.outputs.current_version }}
              docker push ${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
              docker push ${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ steps.get_version.outputs.current_version }}

   deploy:
      needs: build
      runs-on: self-hosted

      env:
         DOCKER_USERNAME: marine1232
         APP_NAME: ds2-frontend

      steps:
         - name: Checkout code
           uses: actions/checkout@v2

         - name: Set PATH for Docker
           run: echo "PATH=/usr/local/bin:$PATH" >> $GITHUB_ENV

         - name: Print PATH
           run: echo $PATH

         - name: Create .env file for frontend
           run: |
              echo "REACT_APP_ENV=${{ secrets.REACT_APP_ENV }}" > .env
              echo "REACT_APP_API_PROD_ENDPOINT=${{ secrets.REACT_APP_API_PROD_ENDPOINT }}" >> .env

         - name: Debug .env file for frontend
           run: cat .env

         - name: Login to Docker Hub
           run: |
              echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

         - name: Pull latest Docker image
           run: |
              docker pull ${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest

         - name: Run Docker Compose
           run: |
              docker compose -f docker-compose.frontend.yml down
              docker compose -f docker-compose.frontend.yml up -d
